//Generated by GuiGenie - Copyright (c) 2004 Mario Awad.
//Home Page http://guigenie.cjb.net - Check often for new versions!

import controller.SendDataToApi;
import model.Sensor;

import javax.swing.*;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.util.Date;
import java.util.Random;
import java.util.TimerTask;
import java.util.Timer;

import java.util.UUID;




public class Home extends JPanel {
    private JLabel jcomp1;
    private static JTextField idField;
    private JLabel jcomp3;
    private static JTextField floorNo;
    private JLabel jcomp5;
    private static JTextField roomNo;
    private JLabel jcomp7;
    private static JSlider co2Value;
    private JLabel jcomp9;
    private static JSlider smokeValue;
    private static JCheckBox sensorStatus;
    private JLabel jcomp12;
    private static JButton updateButton;
    private static JLabel appStatus;
    private static Sensor sensor;
    private static String uniqueID;
    private static SendDataToApi sendDataToApi;
    static Random rand;
    static Timer timer;
    private static boolean connected =false;

    private Home() {
        //construct components
        jcomp1 = new JLabel ("Sensor ID (Auto Gen)");
        idField = new JTextField (5);
        jcomp3 = new JLabel ("Floor No :");
        floorNo = new JTextField (5);
        jcomp5 = new JLabel ("Room No :");
        roomNo = new JTextField (5);
        jcomp7 = new JLabel ("CO2 Value");
        co2Value = new JSlider (0, 10);
        jcomp9 = new JLabel ("Smoke Value");
        smokeValue = new JSlider (0, 10);
        sensorStatus = new JCheckBox ("Active");
        jcomp12 = new JLabel ("Sensor Status");
        updateButton = new JButton ("Connect to REST API");
        appStatus = new JLabel ("status: Disconnected!");

        //set components properties
        idField.setEnabled (false);
        roomNo.setEnabled(false);
        floorNo.setEnabled(false);
        smokeValue.setEnabled(false);
        co2Value.setEnabled(false);

        co2Value.setOrientation (JSlider.HORIZONTAL);
        co2Value.setMinorTickSpacing (1);
        co2Value.setMajorTickSpacing (5);
        co2Value.setPaintTicks (true);
        co2Value.setPaintLabels (true);
        smokeValue.setOrientation (JSlider.HORIZONTAL);
        smokeValue.setMinorTickSpacing (1);
        smokeValue.setMajorTickSpacing (5);
        smokeValue.setPaintTicks (true);
        smokeValue.setPaintLabels (true);

        //adjust size and set layout
        setPreferredSize (new Dimension(385, 574));
        setLayout (null);

        //add components
        add (jcomp1);
        add (idField);
        add (jcomp3);
        add (floorNo);
        add (jcomp5);
        add (roomNo);
        add (jcomp7);
        add (co2Value);
        add (jcomp9);
        add (smokeValue);
        add (sensorStatus);
        add (jcomp12);
        add (updateButton);
        add (appStatus);

        //set component bounds (only needed by Absolute Positioning)
        jcomp1.setBounds (10, 25, 125, 20);
        idField.setBounds (165, 25, 185, 25);
        jcomp3.setBounds (10, 65, 100, 25);
        floorNo.setBounds (165, 65, 185, 25);
        jcomp5.setBounds (10, 105, 100, 25);
        roomNo.setBounds (165, 105, 185, 25);
        jcomp7.setBounds (10, 160, 100, 25);
        co2Value.setBounds (15, 190, 350, 50);
        jcomp9.setBounds (10, 270, 100, 25);
        smokeValue.setBounds (15, 305, 350, 45);
        sensorStatus.setBounds (25, 410, 100, 25);
        sensorStatus.setSelected(true);
        jcomp12.setBounds (10, 375, 100, 25);
        updateButton.setBounds (40, 470, 295, 35);
        appStatus.setBounds (0, 550, 160, 25);
    }


    public static void main (String[] args) {
        JFrame frame = new JFrame ("Sensor Emulator");
        frame.setDefaultCloseOperation (JFrame.EXIT_ON_CLOSE);
        frame.getContentPane().add (new Home());
        frame.pack();
        frame.setVisible (true);
        frame.setResizable(false);
        frame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                if (uniqueID!=null){
                try {
                    sendDataToApi.deleteData(sensor);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }}
            }
        });
         sendDataToApi = new SendDataToApi();
        updateButton.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                System.out.println("Button clicked! ");
                makeSensorObject();

                if (connected) {
                    timer.cancel();
                    updateButton.setText("Connect to REST API");
                    appStatus.setText("status: Disconnected!");
                    try {
                        sendDataToApi.deleteData(sensor);
                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                    uniqueID =null;
                    sensor=null;
                } else {
                    try {

                            uniqueID = sendDataToApi.makeRequest(sensor);
                        if (uniqueID == null) {
                            appStatus.setText("status: Error While Connecting");
                        }else {
                            updateButton.setText("Disconnect from API");
                            appStatus.setText("status: Connected!");
                            connected = true;
                            autoUpdate();
                        }


                    } catch (IOException ex) {
                        ex.printStackTrace();
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }
            }
        });

    }

    private static void autoUpdate() {

        TimerTask task = new TimerTask() {

            @Override
            public void run() {
                makeSensorObject();
                try {
                    sendDataToApi.updateData(sensor);
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }
        };

        timer = new Timer();
        timer.schedule(task, new Date(), 10000);
    }

    private static void makeSensorObject() {

        if (sensor == null) {
            sensor = new Sensor();
            rand = new Random();
            sensor.setFloorNo(String.valueOf(rand.nextInt(20)));
            floorNo.setText(sensor.getFloorNo());
            sensor.setRoomNo(String.valueOf(rand.nextInt(20)));
            roomNo.setText(sensor.getRoomNo());
        }



        sensor.setSmokeValue(rand.nextInt(10)+1);
        co2Value.setValue(sensor.getCo2Value());

        sensor.setCo2Value(rand.nextInt(10)+1);
        smokeValue.setValue(sensor.getSmokeValue());

        if (uniqueID!=null){
            sensor.setId(uniqueID);
            idField.setText(uniqueID);
        }

        sensor.setStatus(sensorStatus.isSelected());
        }


}
